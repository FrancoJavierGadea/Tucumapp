---
import arrowRight_icon from "bootstrap-icons/icons/arrow-bar-right.svg?raw";
import arrowLeft_icon from "bootstrap-icons/icons/arrow-bar-left.svg?raw";

const {show} = Astro.props;
---


<custom-map-offcanvas class="Map-offcanvas" show>

    <div class="Map-offcanvas-aside collapse collapse-horizontal">

        <div class="aside-content">
            
            <slot name="aside-content" />

        </div>

    </div>

    <div class="Map-offcanvas-content">


        <div class="Map-offcanvas-controls">

            <button class="btn btn-primary">Primary</button>
            <button class="btn btn-secondary">Secondary</button>
            <button class="btn btn-success">Success</button>
            <button class="btn btn-danger">Danger</button>

        </div>

        <button class="btn Map-offcanvas-btn" type="button">
            
            <div class="arrow-right-icon" set:html={arrowRight_icon} />
            <div class="arrow-left-icon" set:html={arrowLeft_icon} />
        </button>

    </div>

</custom-map-offcanvas>

<script>
    import Collapse from "bootstrap/js/dist/collapse.js";

    class CustomMapOffcanvas extends HTMLElement {

        #show = false;

        constructor() {
            super();

            this.#show = this.hasAttribute('show');

            this.collapse = new Collapse(this.querySelector('.Map-offcanvas-aside'), {
                toggle: this.#show
            });

            this.querySelector('.Map-offcanvas-btn').addEventListener('click', () => {

                this.collapse.toggle();

                this.#show = !this.#show;

                this.#show ? this.setAttribute('show', '') : this.removeAttribute('show');
            });
        }
    }

    customElements.define('custom-map-offcanvas', CustomMapOffcanvas);
</script>


<style>

    .Map-offcanvas {
        display: flex;
        height: 100dvh;
        width: 100dvw;
        position: relative;
        z-index: 1000;

        & .Map-offcanvas-aside {
            height: 100%;
            background-color: #ffffff;
            overflow: hidden;
            
            & .aside-content {
                height: 100%;
                width: 500px;
                display: flex;
                flex-direction: column;
                gap: 10px;
                overflow: hidden auto;

                & * {
                    flex-shrink: 0;
                }
            }
        }

        & .Map-offcanvas-content {
            position: relative;
            height: 100%;
            flex-grow: 1;
        }

        & .Map-offcanvas-btn {
            --bs-btn-padding-x: 5px;
            --bs-btn-padding-y: 5px;
            --bs-border-radius: 0px 8px 8px 0px;
            align-content: center;
            background-color: #e4e4e4;
            height: 50px;
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            margin: auto;

            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        & .arrow-left-icon, &[show] .arrow-right-icon {
            display: none;
        }
        &[show] .arrow-left-icon {
            display: block;
        }

        & .Map-offcanvas-content .Map-offcanvas-controls {
            position: absolute;
            top: 0;
            left: 0;
            padding: 10px;
            display: flex;
            gap: 10px;

        }
    }

    .Map-offcanvas-btn :global(svg) {
        display: block;
    }
</style>